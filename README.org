* Pyphlogiston

A simple, experimental python/sqlite3/fossil storage solution for 
document-style JSON data records that fall into some categories
defined by an enumeration.

The storage layer looks like:

data/repo/fossil.fossil            # history
    |-pyphlogiston.sqlite          # current state
    `-/[enum-value]/[uuid-files]   # staging

There is a fossil repo to track changes to the [/[enum.value]/uuid-files] which are staged
  for versioning in fossil.
Data and its connections are kept in the pyphlogiston.sqlite file.

Emphasis is on:
- Pytest to build it up nicely, if not completely.
- Latest python features. Backward compatibility not considered.

* Setup Steps:
** 0. Installation
*** Toolchain level
   Not going to start here. The code for Fossil has been compiled, with attention to JSON API 
*** System prep
    sudo adduser       fossil
    sudo mkdir        /home/fossil/{bin,museum}
    cd                /home/fossil/bin
    ln          -s    /home/osboxes/src/fossil-snapshot-20210429/fossil
    sudo /home/osboxes/src/fossil-snapshot-20210429/fossil init /home/fossil/museum/museum.fossil
    sudo chown  -Rv    fossil:fossil /home/fossil


    project-id: 422d1937ecb9aab06e40d1a27781e29aeb72fc4c
    server-id:  8a1cce0be8699e9de9d63565354806c96bd8c400
    admin-user: root (initial password is "zMxVg5SB2E")

*** Service installation 
#+name: setup_fossil_service
#+begin_src sh
  FOSSIL=/home/fossil/bin/
  TCPPORT=9000
  USER_SERVICE=/home/osboxes/.config/systemd/user
  USER_MUSEUM=/home/fossil/museum
  mkdir -p ${USER_MUSEUM}
  mkdir -p ${USER_SERVICE}
  FOSSIL_ARGS="--create --localauth --localhost --jsmode inline --nojail --nossl --port ${TCPPORT} ${USER_MUSEUM}/museum.fossil"
  cat <<EOF>${USER_SERVICE}/fossil.service
  [Unit]
  Description=Fossil user server
  After=network.target

  [Service]
  WorkingDirectory=${USER_MUSEUM}
  ExecStart=${FOSSIL}fossil server ${FOSSIL_ARGS}
  Restart=always
  RestartSec=3

  [Install]
  WantedBy=sockets.target
  WantedBy=multi-user.target 
  EOF
  chmod +x ${USER_SERVICE}/fossil.service
  systemctl --user daemon-reload
  systemctl --user enable    fossil.service
  systemctl --user start     fossil.service
  systemctl --user status -l fossil.service 
#+end_src



journalctl --output=verbose --user-unit=fossil.service

** 1. Startup
   How we make sure the Fossil service is running
** 2. Create
   Add records
** 3. Review
*** 3.0 Single entry history
*** 3.1 Category history
** 4. Update
*** 4.0 Change a record
*** 4.1 Merge records
*** 4.2 Split record

* Example Usage


